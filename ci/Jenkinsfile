pipeline {
    agent {
        docker {
            image 'maven:3.6.1'
            args '-v $HOME/.m2:/root/.m2'
        }
    }


    environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "192.168.161.128:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = ""
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus3"
        // project id
        DEVSHELL_PROJECT_ID = "project-mohemed2087"
    }

    stages {

        stage('build-artifacts') {
            steps {
                sh 'mvn clean package'
                }
        }
                    stage('unit-test') {
                        steps {
                            echo "Running tests.."
                          echo " sh 'mvn -Dtest=*Spec test' "
                        }
                    }
        stage("publish-artifacts") {
            steps {
                script {
                      if(env.GIT_BRANCH.contains("feature/")){
                           NEXUS_REPOSITORY = "maven-features"
                           VERSION="1.0-SNAPSHOT"
                           }
                      else if(env.GIT_BRANCH.contains("develop")){
                           NEXUS_REPOSITORY = "maven-snapshots"
                           VERSION="1.0-SNAPSHOT"
                           }
                       else if(env.GIT_BRANCH.contains("master")) {
                            NEXUS_REPOSITORY = "maven-releases"
                            VERSION="release"
                            }

                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    print "version =>>>>>>>>>>>>>>> "+VERSION
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: VERSION,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
		        stage ('deploy'){
            steps{
                timeout(time:5, unit:'DAYS'){
                    input message:'Approve for Deployment?'
                       script{
                              branch = env.GIT_BRANCH.replace("/","%2F")
                             }
                }

                build(job: 'cloud-data-pump-cd/'+branch)
             // build job: 'cloud-data-pump-cd-mb', parameters: [[$class: 'StringParameterValue', name: 'BRANCH_NAME', value: String.valueOf(env.GIT_BRANCH)]]
            }
            post {
                success {
                    echo 'deployment successful'
                }

                failure {
                    echo ' deployment failed.'
                }
            }
        }
    }
}